// 0은 지뢰가 없음 1은 지뢰가 있음
// a, b
const 도시크기 = 5; // 수색할 도시의 크기
const 탐색가능지역 = 3; // 수색할 수 있는 정사격형 범위

const 지뢰밭 = [
  [1, 0, 0, 1, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0],
];

// 이차원 배열로 생각할 것

// [0][0] [0][1] [0][2]
// [1][0] [1][1] [1][2]
// [2][0] [2][1] [2][2]

let iadd = 0; // 시작할 수 있는 위치라고 생각하면 되겠네
let jadd = 0; // 증가 변수도 for문을 돌아야 한다.
let 범위당찾은지뢰리스트 = [];
let 찾은지뢰 = 0;
for (let iadd = 0; iadd <= 도시크기 - 탐색가능지역; iadd++) {
  for (let jadd = 0; jadd <= 도시크기 - 탐색가능지역; jadd++) {
    for (let i = iadd; i <= 탐색가능지역 - 1 + iadd; i++) {
      for (let j = jadd; j <= 탐색가능지역 - 1 + jadd; j++) {
        찾은지뢰 += 지뢰밭[i][j];
      }
    }
    범위당찾은지뢰리스트.push(찾은지뢰);
    찾은지뢰 = 0;
  }
}

console.log(Math.max.apply(null, 범위당찾은지뢰리스트));
console.log(Math.max(...범위당찾은지뢰리스트));

// 1. 나는 어떤 생각을 하다가 막혔는가?
// 2차원 배열까지는 생각을 했는데 시작점을 어떻게 움직일지에 대해서 생각하지 못했다.

// 2. 다음에는?
// 00 -> 01 -> 02 이런식으로 옮기는 방법을 for문 움직이는 방법으로 접근하자.
// Math.max(...범위당찾은지뢰리스트)도 생각해볼 것
